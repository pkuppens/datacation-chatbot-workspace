[project]
name = "datacation-chatbot"
version = "0.1.0"
description = "A chatbot for data analysis using Chainlit and LangChain"
readme = "README.md"
requires-python = ">=3.11"
dependencies = [
    "chainlit>=2.5.5",
    "ipykernel>=6.29.5",
    "jupyter>=1.1.1",
    "langchain>=0.3.24",
    "langchain-community>=0.3.22",
    "langchain-core>=0.1.27",
    "langchain-google-genai>=2.1.3",
    "langgraph>=0.4.3",
    "nbstripout>=0.8.1",
    "pre-commit>=4.2.0",
    "ruff>=0.11.8",
    "detect-secrets>=1.4.0",
    "duckduckgo-search>=8.0.1",
    "datasets>=3.6.0",
    "pandas>=2.2.3",
    "sqlalchemy>=2.0.40",
    "langchain-experimental>=0.3.4",
    "tabulate>=0.9.0",
    "google-api-core>=2.17.1",
    "prefect[sqlalchemy]>=2.14.0",
    "prefect-sqlalchemy>=0.3.0",
    "requests>=2.31.0",
    "pip>=25.1.1",
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.1",
    "pytest-env>=1.1.1",
    "mcp[cli]>=1.8.0",
]

[project.scripts]
chat = "chat_app:main"
test-titanic = "test_titanic_db:test_titanic_queries"
titanic-data-analyst-cli = "scripts.titanic_data_analyst_cli:main"
titanic-pipeline = "data_pipeline.titanic_pipeline:main"
show-schema = "tools.show_schema:main"
test-gemini-500 = "test_gemini_api_500:main"
notebook_1 = "scripts.notebook_1:main"
notebook_2 = "scripts.notebook_2:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["chatbot_workshop"]

[dependency-groups]
dev = [
    "jupyterlab>=4.4.1",
]

[tool.ruff]
# Exclude a variety of commonly ignored directories
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

# Keep original line length
line-length = 132
target-version = "py311"

[tool.ruff.lint]
# Basic error and warning checks only
select = ["E", "W", "F"]
ignore = ["E501"]  # Ignore line length errors

# Allow autofix for warnings
fixable = ["W", "F"]

[tool.ruff.format]
# Use double quotes for strings
quote-style = "double"

# Indent with spaces, rather than tabs
indent-style = "space"

# Respect magic trailing commas
skip-magic-trailing-comma = false

# Respect line endings
line-ending = "auto"

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--verbose",
    "--showlocals",
    "--tb=short",
    # Coverage settings are commented out as they're not essential for this project
    # and can interfere with more important test output. Enable when coverage
    # becomes a priority.
    # "--cov=.",
    # "--cov-report=term-missing",
    # "--cov-report=html",
]
log_cli = true
log_cli_level = "INFO"
log_cli_format = "%(asctime)s [%(levelname)8s] %(message)s (%(filename)s:%(lineno)s)"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "llm: marks tests that require LLM API access (use '-m llm' to run)",
    "cli: marks tests that can be run from command line",
    "data: marks tests that require data files",
    "api: marks tests that make external API calls",
    "db: marks tests that require database access",
]
